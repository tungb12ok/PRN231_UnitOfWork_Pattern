using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using JewelryAuctionBusiness.Dto;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Newtonsoft.Json;

namespace WebApplication1.Pages.AuctionSession
{
    public class AuctionSesionDetailModel : PageModel
    {
        private readonly IHttpClientFactory _clientFactory;

        public AuctionSesionDetailModel(IHttpClientFactory clientFactory)
        {
            _clientFactory = clientFactory;
        }

        public AuctionViewModel Auction { get; set; }
        [BindProperty] public BidderAuction BidderAuction { get; set; }

        public async Task OnGetAsync(int id)
        {
            var apiUrl =
                $"https://localhost:7241/odata/Auction({id})?$expand=BidderDto($expand=CustomerDto),JewelryDto";
            var client = _clientFactory.CreateClient();

            var response = await client.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                Auction = JsonConvert.DeserializeObject<AuctionViewModel>(json);
            }
            else
            {
                Auction = null;
            }
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var apiUrl = "https://localhost:7241/api/Bidder/place-bid";

            var bid = new BidderAuction
            {
                BidderId = 0, // This might be auto-generated by the backend
                CurrentBidPrice = BidderAuction.CurrentBidPrice,
                AuctionId = BidderAuction.AuctionId,
                CustomerId = BidderAuction.CustomerId
            };

            var client = _clientFactory.CreateClient();
            var content = new StringContent(JsonConvert.SerializeObject(bid), Encoding.UTF8, "application/json");

            var response = await client.PostAsync(apiUrl, content);

            if (response.IsSuccessStatusCode)
            {
                return RedirectToPage(new { BidderAuction.AuctionId });
            }
            else
            {
                // Handle error response
                ModelState.AddModelError(string.Empty, "An error occurred while placing the bid.");
                await OnGetAsync(BidderAuction.AuctionId);
                return Page();
            }
        }
    }
}

public class CustomerDto
{
    public int CustomerId { get; set; }
    public string CustomerName { get; set; }
    public string Phone { get; set; }
    public int CompanyId { get; set; }
    public string Email { get; set; }
}

public class BidderDto
{
    public int BidderId { get; set; }
    public int CustomerId { get; set; }
    public decimal CurrentBidPrice { get; set; }
    public CustomerDto CustomerDto { get; set; }
}

public class JewelryDto
{
    public int JewelryId { get; set; }
    public string JewelryName { get; set; }
    public string Discription { get; set; }
}

public class AuctionViewModel
{
    public int AuctionID { get; set; }
    public int JewelryID { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public string Status { get; set; }
    public string Description { get; set; }
    public decimal InitialPrice { get; set; }
    public int BidderID { get; set; }
    public int RequestDetailID { get; set; }
    public BidderDto BidderDto { get; set; }
    public JewelryDto JewelryDto { get; set; }
}